#!/usr/bin/env bash

##
# ./collect
# - Collects local configuration files and prepares them for version control.
##

set -e

SCRIPT_DIR="$(
  cd "$(dirname "$0")" >/dev/null 2>&1
  pwd -P
)"
NEOVIM_CONFIG_PATH=~/.config/nvim
WTF_CONFIG_PATH=~/.config/wtf/config.yml

STYLE_RESET=$(printf '\e[0m')
STYLE_BOLD=$(printf '\e[1m')
STYLE_HEADER=$(printf '\e[1;97m')
STYLE_SUBHEADER=$(printf '\e[1;36m')
STYLE_PARAGRAPH=$(printf '\e[2m')
STYLE_CLEAR_PREVIOUS_LINE="$(printf '\e[1A\e[2K')"

function showError {
  echo -e "${STYLE_RESET}${STYLE_BOLD}\nERROR: $1${STYLE_RESET}" 1>&2
  exit 1
}

function showInfo {
  echo -e "${STYLE_RESET}${STYLE_BOLD}./$(basename $0)${STYLE_RESET}"
  echo "Collects local configuration files and prepares them for version control."
}

function printHeader {
  echo -e "${STYLE_RESET}\n${STYLE_HEADER}$1${STYLE_RESET}"
}

function printSubheader {
  echo -e "${STYLE_RESET}\n${STYLE_HEADER}▸${STYLE_RESET} ${STYLE_SUBHEADER}$1${STYLE_RESET}"
}

function printParagraph {
  echo -e "${STYLE_RESET}  ${STYLE_PARAGRAPH}$1${STYLE_RESET}"
}

function clearPreviousLine {
  printf $STYLE_CLEAR_PREVIOUS_LINE
}

function waitForEnterKey {
  tput bel
  read -p "Press Enter to continue"
  clearPreviousLine
}

function main {
  # parse arguments
  while [ $# -gt 0 ]; do
    case $1 in
    --help)
      showInfo
      exit
      ;;
    -h)
      showInfo
      exit
      ;;
    *) showError "Invalid option $1" ;;
    esac
    shift
  done

  collect
}

function collect {
  printHeader "☕️ Collecting local configurations..."

  echo "About to gather local configuration files and copy them into ${SCRIPT_DIR/#$HOME/~}."
  waitForEnterKey
  clearPreviousLine

  ################################################

  printSubheader "WezTerm"
  [[ -f ~/.wezterm.lua ]] && cp -r ~/.wezterm.lua $SCRIPT_DIR/

  ################################################

  printSubheader "Neovim and its plugins"
  [[ -d $NEOVIM_CONFIG_PATH ]] && cp -r $NEOVIM_CONFIG_PATH $SCRIPT_DIR/

  ################################################

  printSubheader "Git"
  if [[ -f ~/.gitconfig ]]; then
    printParagraph "~/.gitconfig"
    cp ~/.gitconfig $SCRIPT_DIR/.gitconfig_global
  else
    printParagraph "~/.gitconfig doesn't exist"
  fi
  if [[ -f $SCRIPT_DIR/.gitconfig_global ]]; then
    # strip Git config from user specifics
    cat $SCRIPT_DIR/.gitconfig_global |
      grep -v "email = $(git config --global user.email)" |
      grep -v "name = $(git config --global user.name)" \
        >$SCRIPT_DIR/.gitconfig_global
  fi
  if [[ -f ~/.gitignore ]]; then
    printParagraph "~/.gitignore"
    cp ~/.gitignore $SCRIPT_DIR/.gitignore_global
  else
    printParagraph "~/.gitignore doesn't exist"
  fi
  if [[ -f ~/.gitattributes ]]; then
    printParagraph "~/.gitattributes"
    cp ~/.gitattributes $SCRIPT_DIR/.gitattributes_global
  else
    printParagraph "~/.gitattributes doesn't exist"
  fi

  ################################################

  printSubheader "Zsh dotfiles"
  if [[ -f ~/.zshrc ]]; then
    printParagraph "~/.zshrc"
    cp ~/.zshrc $SCRIPT_DIR/.zshrc
  else
    printParagraph "~/.zshrc doesn't exist"
  fi

  printSubheader "ripgrep"
  if [[ -f ~/.rgignore ]]; then
    printParagraph "~/.rgignore"
    cp ~/.rgignore $SCRIPT_DIR/.rgignore_global
  else
    printParagraph "~/.rgignore doesn't exist"
  fi

  printSubheader "WTF Terminal Dashboard"
  if [[ -f $WTF_CONFIG_PATH ]]; then
    printParagraph $WTF_CONFIG_PATH
    cp $WTF_CONFIG_PATH $SCRIPT_DIR/wtf_dashboard_config.yml
  else
    printParagraph "$WTF_CONFIG_PATH doesn't exist"
  fi

  ################################################

  tput bel
  printHeader "🎉 All done!"
}

main "$@"
